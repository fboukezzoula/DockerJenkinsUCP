PermitRootLogin no          # Désactive la connexion en tant que root
PasswordAuthentication no   # Désactive l'authentification par mot de passe
AllowUsers sshproxy         # Autorise uniquement l'utilisateur sshproxy




Host server1
    HostName server1.example.com
    User your_username
    Port 22

Host server2
    HostName server2.example.com
    User your_username
    Port 22

Match Host server1 Host server2 exec "ssh -q -o ConnectTimeout=5 -o BatchMode=yes -o StrictHostKeyChecking=no %r@%h echo 2>&1" && ProxyJump=server1 || ProxyJump=server2



Host server2 server1
    User your_username
    Port 22  # Port SSH standard du serveur distant

    # Essayer d'abord server2, puis server1 en cas d'échec
    ProxyCommand ssh -q -W %h:%p server2 || ssh -q -W %h:%p server1




Si vous souhaitez configurer SSH pour qu'il se connecte directement à server1 lorsqu'il est disponible et, en cas d'échec, utilise un jumphost (server2) comme alternative, vous pouvez configurer une option Match dans votre fichier ~/.ssh/config. Voici comment vous pouvez le faire :

ssh
Copy code
Host server1
    HostName server1.example.com
    User your_username
    Port 22

Host server2
    HostName server2.example.com
    User your_username
    Port 22

Match Host server1 Host server2 exec "ssh -q -o ConnectTimeout=5 -o BatchMode=yes -o StrictHostKeyChecking=no %r@%h echo 2>&1" && ProxyJump=server1 || ProxyJump=server2
Dans cette configuration, SSH tentera d'abord de se connecter à server1. Si la connexion à server1 échoue, il passera automatiquement à server2, qui est configuré comme jumphost.

Assurez-vous de remplacer server1.example.com et server2.example.com par les adresses de vos serveurs et your_username par votre nom d'utilisateur.

Cela permet de se connecter directement à server1 lorsque possible, tout en basculant automatiquement vers server2 (jumphost) en cas d'échec de la connexion.




Ajoutez une entrée pour server1 et server2, en spécifiant le nom d'utilisateur, le port et le ProxyJump comme suit :


Host server1
    HostName server1.example.com
    User your_username
    Port 22
    ProxyJump server2

Host server2
    HostName server2.example.com
    User your_username
    Port 22

Avec cette configuration, lorsque vous exécutez ssh server1, SSH tentera de se connecter à server1 en passant par server2. Si la connexion à server1 échoue, SSH basculera automatiquement vers server2. Cela vous permet d'effectuer un basculement automatique entre les serveurs en cas d'échec de connexion.



Host server2 server1
    User your_username
    Port 22  # Port SSH standard du serveur distant

    # Essayer d'abord server2, puis server1 en cas d'échec
    ProxyCommand ssh -q -W %h:%p server2 || ssh -q -W %h:%p server1
